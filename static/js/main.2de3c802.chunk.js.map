{"version":3,"sources":["terms.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["terms","mapAirtableValues","values","map","value","Object","objectSpread","fields","id","Record","base","Airtable","apiKey","process","REACT_APP_AIRTABLE_KEY","uid","localStorage","getItem","setItem","firstPart","Math","random","secondPart","toString","slice","generateUID","App","_useState","useState","_useState2","slicedToArray","snacks","setSnacks","_useState3","_useState4","snackMessage","setMessage","_useState5","_useState6","allos","setAllos","totalBudget","length","select","view","firstPage","err","records","console","error","total","reduce","acc","allo","Number","react_default","a","createElement","className","round","snack","key","Typography","title","Slider","name","max","step","valueLabelDisplay","onChange","e","_ref","currentAllo","log","defineProperty","handleChange","getAriaValueText","Button","variant","color","onClick","create","record","Snackbar","anchorOrigin","vertical","horizontal","open","onClose","ContentProps","aria-describedby","message","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2de3c802.chunk.js","sourcesContent":["const terms = \n`We do not track any of your personal information,\nwe believe in yada yada yada you're information is \nindustry's standard dummy text ever since the 1500s, \nwhen an unknown printer took a galley of type and \nscrambled it to make a type specimen book. It has \nsurvived not only five centuries, but also the leap \ninto electronic typesetting, remaining essentially \nunchanged. It was popularised in the 1960s with the \nrelease of Letraset sheets containing Lorem Ipsum \npassages, and more recently with desktop publishing \nsoftware like Aldus PageMaker including versions of \nLorem Ipsum.`\n\nexport default terms","export const generateUID = () => {\n  // I generate the UID from two parts here \n  // to ensure the random number provide enough bits.\n  var firstPart = (Math.random() * 46656) | 0;\n  var secondPart = (Math.random() * 46656) | 0;\n  firstPart = (\"000\" + firstPart.toString(36)).slice(-3);\n  secondPart = (\"000\" + secondPart.toString(36)).slice(-3);\n  return firstPart + secondPart;\n}\n\nexport const mapAirtableValues = values => values.map(value => ({\n  ...value.fields,\n  id: value.id,\n  Record: value\n}))","/* eslint-disable jsx-a11y/accessible-emoji */\nimport React, {useState} from 'react';\nimport './App.css';\nimport './Shorthand.css';\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport terms from './terms'\nimport Button from '@material-ui/core/Button';\nimport {generateUID, mapAirtableValues} from './utils'\nimport Airtable from 'airtable'\n\n/* \n*\n* INITIAL SETUP\n*\n*/\nconst base = new Airtable({apiKey: process.env.REACT_APP_AIRTABLE_KEY}).base('appVnznDLeNrQGLnE');\nconst uid = localStorage.getItem('hasa_uid')\nif (!uid) localStorage.setItem('hasa_uid', generateUID())\n\n\nfunction App() {\n  const [snacks, setSnacks] = useState([]);\n  const [snackMessage, setMessage] = useState(null)\n  const [allos, setAllos] = useState({})\n  const totalBudget = snacks.length\n\n  if (!snacks.length){\n    base('snacks').select({\n      view: 'Grid view'\n    }).firstPage(function(err, records) {\n      if (err) { console.error(err); return; }\n      setSnacks(mapAirtableValues(records))\n    });\n  }\n\n  const onSubmit = () => {\n    base('votes').create({uid, ...allos}, function(err, record) {\n      if (err) {\n        console.error(err);\n        return;\n      } else {\n        setMessage('Save Successfull')\n      }\n    });\n  }\n  \n  const total = Object.values(allos)\n    .reduce((acc,allo) => Number(acc) + Number(allo), [])\n\n  const showTerms = () => setMessage(terms) \n\n  const handleChange = ({id, value}) => {\n    const currentAllo = Number(allos[id]) || 0\n    const hypotheticalTotal = total - currentAllo + value\n    const isDecreasing = value < currentAllo\n    const isLessThanTotal = hypotheticalTotal <= totalBudget\n    if (isDecreasing || isLessThanTotal) { \n    console.log('setting', id, value)\n      setAllos({\n        ...allos, \n        [id]: value\n      })\n    }\n  }\n  return (\n    <div className=\"App tac\">\n      <div className='flex jcc aife mt30'>\n        <span className='fs1'> {Math.round( total * 10) / 10}</span>\n        <span>/{totalBudget}</span>\n      </div>\n      <p className='fs16 mb30'>budget wisely my friend ü§î</p>\n      <div className='flex'>\n      </div>\n      {snacks.map(snack => <div key={snack.id} className='w300 tal'>\n        {/* <div className='w50 h50 rounded flexCenter mr10'>{allos[snack.id] || 0}</div> */}\n        {/* <div className='w300'> */}\n          <Typography>{snack.title}</Typography>\n          <Slider\n            id={snack.id}\n            name={snack.id}\n            max={totalBudget}\n            step={1}\n            valueLabelDisplay='auto'\n            value={allos[snack.id] || 0}\n            onChange={(e, value) => handleChange({ id: snack.id, value })}\n            getAriaValueText={() => 'input'}\n          /> \n        {/* </div> */}\n      </div> )}\n      <div className='mt30 mb50 w100p'>\n        <Button \n          variant=\"contained\" \n          color=\"primary\"\n          onClick={onSubmit}\n          >\n            Send Snack Feedback\n          </Button>\n      </div>\n      <small className='fs10 w300 txtGray'>This app is an expirement and may or <strong className='underline'>may not</strong> impact snack choices.  Thank you for your help in making Wayfair a great place to work and snack </small>\n      <p className='mb20'>üôá‚Äç‚ôÇÔ∏è</p>\n      <div onClick={showTerms} className='fs10 w300 txtBlue pointer underline mb50'>terms and conditions</div>\n      <Snackbar\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n        open={!!snackMessage}\n        onClose={()=> setMessage(null)}\n        ContentProps={{ 'aria-describedby': 'message-id', }}\n        message={<span>{snackMessage}</span>}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}